* need scripts/criu-ns from criu-dev branch
* when I had it working it was with v3.9 (latest release)
  * but I had to grab scripts/criu-ns from criu-dev branch

* then it stopped working at some point and I think I've tracked down why
  * this systemd socket thing emacs has
  * don't recall rebuilding emacs but maybe I did...
  * anyway it has this fancy systemd socket garbage that makes criu dump fail

* try with ./configure --disable-libsystemd
  * tried and failed with ./configure --without-libsystemd
  * which still fucking linked with libsystemd (which is lame)
* FIXED IT
** damnit
*** fuck you systemd
    https://forums.fedoraforum.org/showthread.php?292543-how-to-permanently-disable-systemd-journald-service
*** disabled and masked and killed journald and it all works again
*** at what point did my debian stretch system start running journald for me? FUCK
* Fixing the reboot problem
  * I am not sure why, but after a reboot, the criu emacs doesn't seem to work
  * it could be that it is necessary to rebake the criu image
  * init script should do that, and also clear out any desktop lock files which prevent desktops from being restored
    * find . -name .emacs.desktop.lock -exec rm {} \;
    * now, I already have an emacs-cloner init script
* Blog about it
  * mention the CRAZY SHIT people do in pursuit of faster emacs startup
    * https://github.com/nilcons/emacs-use-package-fast
  * and the downsides to running a single server and emacsclient
* what I ought to do is
  * get (emacs-pid) out to a pidfile
  * make clone-one call that (somehow still fwd args)
  * when launching the server for the CRIU snap, make it write the pid
    * that gets the pid into bash
    * that should let me snapshot it without killing all emacsen which is really just a hack to detect the pid of the server
    * then it becomes possible to script some manager thingummy for it
      * and it's time to ditch bash at that point
      * what language? not so sure... maybe joker scripts?
      * or ... stevedore? bash embedding?
      * or some lisp-flavored something that is always available like perl
      * could do it in ruby or python, those are always available
      * python has hy...
      * racket? does it compile executables?
      * how about common lisp or scheme?



* reimplement logic with babashka and make it better
   * problem 1)
     it's annoying to stop the service, killall, refresh image, start
     not sure I grok why it isn't working smoothly
     but the whole reason to stop all instances of emacs is not necessary
     it was just so that criu dump can have the correct pid of the freshly started emacs server proc
     no reason you cannot have emacsen running
     however the warm one in reserve is holding the socket...
     so the cloner has to be "in on" the need to produce a new image
     that's because due to the nature of emacs-server, you cannot just capture the pid from bash after launching it...
     instead we use the listening socket to find the real pid of the new emacs-server
     * solution: single service which handles cloning them AND refreshing the image
       that way it can receive a message that says "bake me a new one"
       it can then HOLD OFF on processing any clone requests
       while it STOPS the warm cloned one and STARTS a fresh one and AWAITS it starting up and then CRIU-DUMPs it
       and only then it resumes normal processing of "clone one" messages
   * problem 2)
     how does it receive these messages? how does nv interact with it?
     well there should be a simple clone-one script still but the way it works might differ
