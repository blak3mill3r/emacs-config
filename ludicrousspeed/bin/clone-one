#!/bin/bash

# the first argument is a unique name for this emacs instance
# all further arguments will be forwarded to emacsclient, once the new clone is running

# the bin/emacs-clone daemon keeps a warm invisible emacs process available
# at all times
# this script connects to that process using emacsclient and:
#   * passes the pair of pids (this pid and the cloned emacs pid) to nv over a socket
#   * calls (rename-server) which restarts the emacs server on a different socket (named after the argument passed to this script)
#   * calls (prepare-to-die) so that when the last frame is deleted, the process exits; what you'd expect from a non-daemon emacs
#   * awaits the presence of that new named socket
#   * connects to the new emacs server socket and forwards the rest of the arguments to this script

ZENAME=$1

SOCKET_PATH=/run/user/1000/emacs
SOCKET_NAME=$SOCKET_PATH/server

# the pid of this clone-one process, which is the one your window manager would have if your window manager spawns clone-one
CLONE_WRAPPER_PID=$BASHPID

# the actual (global) pid of the fresh emacs clone that is standing by waiting for this script to tell it to do something
EMACS_CLONE_PID=$(cat /home/blake/.emacs.d/ludicrousspeed/fresh.pid)

# before we connect with emacsclient to tell it to rename-server
# we know the pid of the real emacs we're going to be taking over
# and, we know our own pid
# nv process needs the relation between the two because it's going to see a mapped window coming from $CLONE_WRAPPER_PID which is a lie
# given this relationship it can correct for the lie and know the real cloned emacs' pid

NVHOST=localhost
NVPORT=9281
echo "{:event :replace-pid :pid $CLONE_WRAPPER_PID :replacement-pid $EMACS_CLONE_PID}" | nc $NVHOST $NVPORT

tmux new-session -d -s emacs-cloner "emacsclient -s $SOCKET_NAME -e \"(progn (rename-server \\\"$ZENAME\\\") (prepare-to-die) (setq emacs-clone-wrapper-pid $CLONE_WRAPPER_PID) (setq emacs-clone-pid $EMACS_CLONE_PID))\" -nw" >> /tmp/wtf.log 2>&1 

#echo "the tmux exits $?" >> /tmp/wtf.log

while [ ! -e $SOCKET_PATH/$ZENAME ]
do
  #echo "awaiting socket $SOCKET_PATH/$ZENAME" >> /tmp/wtf.log 
  sleep 0.125
done
emacsclient -s $SOCKET_PATH/$ZENAME -c -n "${@:2}" >> /tmp/wtf.log 2>&1

# do I want -n above?
# that's the no-wait option, makes emacsclient exit
# meaning, the pid is gone by the time clojure looks

# ^^ PROBLEM, emacsclient accepts only -e or files ^^
# not both...
# but above I use it to (prepare-to-die) which I must've added after the forwarding files or args
# and, it breaks that
# however I think I needed prepare-to-die to exit emacs after the last frame is deleted
# and there was something fuxored about having it happen in init... ?
# experiment with another way to do it so that this clone-one launcher can fwd args



#echo "the emacsclient exits $?" >> /tmp/wtf.log

# now what would be slick is
# md5sum -z ~/.emacs.d/cfg/*.el|md5sum -
# keep that hash, and somehow automatically make a new CRIU image in the background if it has changed
# unfortunately it seems I am stuck with the limitation that all emacs processes have to stop before baking a new CRIU snap
# is there a way around that? can't run as a different user...
# if I could just identify the particular daemon that might solve it
# but how can I do that? I vaguely remember a failed attempt
# annoyingly emacs does some funky forking so you cannot just bg the proc and get the pid (the actual pid will differ)
# one thing I might be able to do is get the pid from inside emacs, then pass some --eval '(write-pid-somewhere)'
# then grab that somewhere from bash...
# that would work and the fn is (emacs-pid)
# http://www.virtuouscode.com/2011/06/17/make-emacs-server-write-a-pid-file/
# that would mean that I could have some emacsen running and still refresh-image
# THIS WOULD BE AN EXCELLENT IMPROVEMENT ^^

# also it really ought to forward arguments
