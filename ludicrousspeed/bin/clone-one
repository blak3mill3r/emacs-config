#!/bin/bash

# the first argument is a unique name for this emacs instance
# all further arguments will be forwarded to emacsclient, once the new clone is running

# the bin/emacs-clone daemon keeps a warm invisible emacs process available
# at all times
# this script connects to that process using emacsclient and:
#   * calls (rename-server) which restarts the server on a different socket (the argument passed to this script) and displays a new frame
#   * awaits the presence of that new named socket

ZENAME=$1

SOCKET_PATH=/run/user/1000/emacs
SOCKET_NAME=$SOCKET_PATH/server

tmux new-session -d -s gargar "emacsclient -s $SOCKET_NAME -e \"(rename-server \\\"$ZENAME\\\")\" -nw" >> /tmp/wtf.log 2>&1 

#echo "the tmux exits $?" >> /tmp/wtf.log

while [ ! -e $SOCKET_PATH/$ZENAME ]
do
  #echo "awaiting socket $SOCKET_PATH/$ZENAME" >> /tmp/wtf.log 
  sleep 0.125
done
emacsclient -s $SOCKET_PATH/$ZENAME -c -n "${@:2}" -e "(prepare-to-die)" >> /tmp/wtf.log 2>&1

# ^^ PROBLEM, emacsclient accepts only -e or files ^^
# not both...
# but above I use it to (prepare-to-die) which I must've added after the forwarding files or args
# and, it breaks that
# however I think I needed prepare-to-die to exit emacs after the last frame is deleted
# and there was something fuxored about having it happen in init... ?
# experiment with another way to do it so that this clone-one launcher can fwd args



#echo "the emacsclient exits $?" >> /tmp/wtf.log

# now what would be slick is
# md5sum -z ~/.emacs.d/cfg/*.el|md5sum -
# keep that hash, and somehow automatically make a new CRIU image in the background if it has changed
# unfortunately it seems I am stuck with the limitation that all emacs processes have to stop before baking a new CRIU snap
# is there a way around that? can't run as a different user...
# if I could just identify the particular daemon that might solve it
# but how can I do that? I vaguely remember a failed attempt
# annoyingly emacs does some funky forking so you cannot just bg the proc and get the pid (the actual pid will differ)
# one thing I might be able to do is get the pid from inside emacs, then pass some --eval '(write-pid-somewhere)'
# then grab that somewhere from bash...
# that would work and the fn is (emacs-pid)
# http://www.virtuouscode.com/2011/06/17/make-emacs-server-write-a-pid-file/
# that would mean that I could have some emacsen running and still refresh-image

# also it really ought to forward arguments
