* Speeding up startup
** via byte-compiling elisp
*** straight already byte-compiles all the deps, which is great
*** I tried byte-compiling my own cfg/* files and it was a disaster, got frustrated and gave up
*** not sure this is the best approach anyway
** other ideas for speeding it up
*** this crazy CRIU thing is a way to snapshot/restore an entire process's state:
    * https://criu.org/Usage_scenarios#Slow-boot_services_speed_up
    * so use that ^ and script something to rebuild the snapshot prior to the next launch if cfg has changed
      * IOW, do something like storing a snapshot with a git SHA, never touch emacs cfg without committing (to a temp working branch which I squash-merge)
      * instead of launching emacs directly:
        * wrapper script checks SHA and if it does not match then
          * launch emacs normally, when it is done loading init.el then CRIU snapshot it...
        * if it does match then do the fast-path with CRIU snap
          * but what about CLI args?

**** works and is stupidly fast
     * does not support X
     * but emacs --daemon is simple to CRIU
     * but I don't want just one, shared state across all is too cumbersome
     * emacs --bg-daemon=ropes ; criu it ; start that when launching ropes ctx ; use emacsclient from then on
     * https://criu.org/Simple_loop (have to use sudo, at least for dump)
     * with this it is very very fast to launch a client
*** startup profiling
    https://github.com/jschaf/esup

** whoa
   /home/blake/bin/emacs --batch --load ~/.emacs.d/init.el --execute '(dump-emacs "myemacs" "/home/blake/bin/emacs")'
   * except this didn't work
* CRIU is the answer I think
** the tricky bit is, have to start a --daemon and criu it
** restore that but it has /tmp/emacs1000/server as the socket
** need to be able to restore multiple, so the freshly restored one needs to get out of the way on that socket
** there's crazy CRIU image modifying hackery that can do this I think, however
** I think emacs can do it, though its awkward, but the following works to change server socket
*** obviously drops all clients, but that's fine for my purpose
**** this changes the server socket to "foo"
    * emacsclient -s /tmp/emacs1000/server -e '(rename-server "foo")' -nw
      * without the -c it does not work, which is odd... it makes it briefly display emacs in the terminal... not sure what it would do if run non-interactively
    * criu restore a second time does not like it... I apparently need scripts/criu-ns
    * and indeed that seems to work, had to clone criu and checkout the branch criu-dev (they say it still has problems)
      * BUT it does what I want! I get two separate server processes
      * sudo ~/src/criu/scripts/criu-ns restore -d -vvv -o restore.log && echo OK
        * I think maybe I have to do all of them with criu-ns
      * emacsclient -s /tmp/emacs1000/server -e '(rename-server "foo")' -nw
        * that renames the first one's socket
      * sudo ~/src/criu/scripts/criu-ns restore -d -vvv -o restore.log && echo OK
        * restores a new one
      * emacsclient -s /tmp/emacs1000/doublez -nc
      * emacsclient -s /tmp/emacs1000/server -nc
    * BAM! two separate ones spawned by criu
* Interesting emacs integrations to try
  * https://github.com/Silex/docker.el
  * https://github.com/vermiculus/magithub
  * https://gitlab.com/iankelling/spray <-- speed reading

* press keys and get equivalent elisp (or, from a macro)
  * https://github.com/Silex/elmacro

* fun stuff
  * https://github.com/vibhavp/emacs-xkcd


* GIT, magit, things to improve:
https://hackernoon.com/fix-conflicts-only-once-with-git-rerere-7d116b2cec67
https://hub.github.com/hub-sync.1.html
https://github.com/vermiculus/magithub/issues/22
https://stackoverflow.com/questions/4318161/can-git-pull-all-update-all-my-local-branches
https://github.com/jwiegley/dot-emacs/blob/master/init.el#L2596
https://github.com/vermiculus/ghub-plus
https://github.com/vermiculus/magithub/blob/master/magithub-completion.el
https://github.com/magit/magit-imerge
https://magit.vc/manual/ghub/How-Ghub-uses-Auth_002dSource.html#How-Ghub-uses-Auth_002dSource <-- never got this working and committed change now behavior is annoying
